{"componentChunkName":"component---src-pages-pages-json-path-tsx","path":"/components/introduction/","result":{"data":{"pagesJson":{"_layout":"basic","_path":"/components/introduction","definition":null,"leading":"","title":"Introduction to Components","owners":null,"heroImage":{"alt":"Demo image 2","src":{"publicURL":"/static/024565235e108b712779bbc19b1e139a/demo-image-2.png"}},"quickResources":null,"content":[{"contentComponentId":"blocks.introduction-text","title":null,"leading":null,"withCopyLink":null,"withDivider":null,"size":null,"as":null,"markdown":{"raw":"## Overview\n\nWelcome to Blueprints for React, a collection of 40+ components designed for documentation experiences. Whether you’re looking to extend a [Starter project](/starters/introduction/) or embarking on building a documentation site from scratch, our library is tailored to support your vision. It’s especially useful for projects that demand a high level of customization, allowing you to construct a documentation site that perfectly aligns with your project’s identity and requirements."}},{"contentComponentId":"blocks.text","title":null,"leading":null,"withCopyLink":null,"withDivider":null,"size":null,"as":null,"markdown":{"raw":"1. Blueprints components are designed and built to seamlessly integrate within the Fluent ecosystem.\n2. Each component in our library is the result of research into successful design patterns. This ensures that when you use our components, you’re not just building a site; you’re leveraging best practices in documentation.\n3. We place a high emphasis on accessibility and usability standards, ensuring that your documentation is not only beautiful but also inclusive of users with different needs.\n\n## Getting Started\n\nIn the following sections, we’ll dive deeper into the technical details—design and code—and how you can start using them.\n\n- **Fluent tokens.** The designs and React implementation draw from Fluent tokens.\n- **Light and dark modes.** All components support light and dark mode out of the box.\n- **Brand ramp.** Components will respond to a custom branding colors.\n\n### Working with Figma Toolkit\n\nEach React component has a mirror Figma component that provides designers with a high-fidelity and interactive design environment. The toolkit is designed to ensure that what you create in Figma aligns perfectly with the final product, bridging the gap between initial design and final implementation.\n\nEach component documentation page has a link to its Figma toolkit. This setup allows you to prototype and iterate on your designs using components that are visually and functionally consistent with their React counterparts.\n\n### Setting up the project\n\n#### 1. Utilizing Griffel for Styling\nBlueprints React components are styled with Fluent’s Griffel library for styling. While Griffel is not a requirement, it is a great choice for styling, especially for projects within the Fluent ecosystem. Griffel excels in optimizing CSS and enhancing the developer experience. To learn more about Griffel head over to [its documentation](https://griffel.js.org/).\n\nHere is a sample of how Blueprints styles its components with Fluent tokens and Griffel.\n\n```ts\nimport { tokens } from '@fluentui/react-theme';\nimport { makeStyles } from '@griffel/react';\n\nexport const useMyComponentStyles = makeStyles({\n  root: {\n    display: 'grid',\n    rowGap: tokens.spacingVerticalS,\n  },\n});\n\n```\n\n```tsx\nimport { mergeClasses } from '@griffel/react';\nimport type { FC } from 'react';\nimport * as React from 'react';\n\nimport { useMyComponentStyles } from './my-component.styles';\nimport type { MyComponentProps } from './my-component.types';\n\nexport const MyComponent: FC<MyComponentProps> = ({ className, children }) => {\n  // Styles\n  const classes = useMyComponentStyles();\n\n  return <div className={mergeClasses(classes.root, className)}>{children}</div>;\n};\n\n```\n\n#### 2. Wrapping Your Project with ThemeProvider\n\nBlueprints components require `ThemeProvider` to function correctly.\n\n```tsx\nimport { ThemeProvider } from '@microsoft/blueprints.theming';\n\nconst App = () => (\n  <ThemeProvider>\n    {/* Your app components */}\n  </ThemeProvider>\n);\n\n```\n\n#### 3. Customizing with Optional Brand Ramp\nYou have the option to further customize your application's theme by passing a brand ramp to the ThemeProvider. A brand ramp allows you to align the component styling with your brand colors.\n\n```ts\nimport { type BrandVariants } from '@fluentui/react-theme';\n\nexport const YOUR_DOCS_BRAND_VARIANTS: BrandVariants = {\n  10: '#151515',\n  20: '#1E1F22',\n  30: '#26282E',\n  40: '#2D303D',\n  50: '#34394F',\n  60: '#3A4261',\n  70: '#304391',\n  80: '#3853BD',\n  90: '#405BC6',\n  100: '#5E78E0',\n  110: '#7188E6',\n  120: '#8398EB',\n  130: '#9FAFF1',\n  140: '#B7C4F7',\n  150: '#CFD8FA',\n  160: '#EBEEFC',\n};\n// Pass to <ThemeProvider brandVariants={YOUR_DOCS_BRAND_VARIANTS}>\n```\n\n#### 4. Enhancing with the Shell Component\nFor a more comprehensive setup, consider adding the Shell component. The Shell component provides a foundational layout, including navigation, header, and footer. It also integrates functionality to switch between light and dark modes. Learn more about Shell in its documentation.\n\n#### P.S.\nCheck the project’s dependencies for the currently supported version of React and Typescript."}}],"tabs":null}},"pageContext":{"id":"367c97d8-8e84-5053-bc2e-e7843733e6c1","_path":"/components/introduction","__params":{"_path":"components"}}},"staticQueryHashes":["3551971565","728947269","952353435"],"slicesMap":{}}